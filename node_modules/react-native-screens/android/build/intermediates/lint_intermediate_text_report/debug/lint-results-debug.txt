/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:10: Warning: A newer version of com.android.tools.build:gradle than 4.2.2 is available: 7.4.2 [AndroidGradlePluginVersion]
        classpath('com.android.tools.build:gradle:4.2.2')
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "AndroidGradlePluginVersion":
   This detector looks for usage of the Android Gradle Plugin where the
   version you are using is not the current stable release. Using older
   versions is fine, and there are cases where you deliberately want to stick
   with an older version. However, you may simply not be aware that a more
   recent version is available, and that is what this lint check helps find.

/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:107: Warning: A newer version of androidx.appcompat:appcompat than 1.1.0 is available: 1.6.1 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.1.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:108: Warning: A newer version of androidx.fragment:fragment than 1.2.1 is available: 1.5.5 [GradleDependency]
    implementation 'androidx.fragment:fragment:1.2.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:109: Warning: A newer version of androidx.coordinatorlayout:coordinatorlayout than 1.1.0 is available: 1.2.0 [GradleDependency]
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:110: Warning: A newer version of androidx.swiperefreshlayout:swiperefreshlayout than 1.0.0 is available: 1.1.0 [GradleDependency]
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:111: Warning: A newer version of com.google.android.material:material than 1.1.0 is available: 1.8.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.1.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:112: Warning: A newer version of androidx.core:core-ktx than 1.5.0 is available: 1.9.0 [GradleDependency]
    implementation "androidx.core:core-ktx:1.5.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:106: Warning: Avoid using + in version numbers; can lead to unpredictable and unrepeatable builds (com.facebook.react:react-native:+) [GradleDynamicVersion]
    implementation 'com.facebook.react:react-native:+'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDynamicVersion":
   Using + in dependencies lets you automatically pick up the latest available
   version rather than a specific, named version. However, this is not
   recommended; your builds are not repeatable; you may have tested with a
   slightly different version than what the build server used. (Using a
   dynamic version as the major version number is more problematic than using
   it in the minor version position.)

/home/chris/.documents/legislate/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/ScreenWindowTraits.kt:110: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
                @TargetApi(Build.VERSION_CODES.LOLLIPOP)
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/home/chris/.documents/legislate/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/ScreenStackFragment.kt:160: Warning: Prefer "SHOW_AS_ACTION_IF_ROOM" instead of "SHOW_AS_ACTION_ALWAYS" [AlwaysShowAction]
                setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS)
                                         ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "AlwaysShowAction":
   Using showAsAction="always" in menu XML, or MenuItem.SHOW_AS_ACTION_ALWAYS
   in Java code is usually a deviation from the user interface style guide.Use
   ifRoom or the corresponding MenuItem.SHOW_AS_ACTION_IF_ROOM instead.

   If always is used sparingly there are usually no problems and behavior is
   roughly equivalent to ifRoom but with preference over other ifRoom items.
   Using it more than twice in the same menu is a bad idea.

   This check looks for menu XML files that contain more than two always
   actions, or some always actions and no ifRoom actions. In Java code, it
   looks for projects that contain references to
   MenuItem.SHOW_AS_ACTION_ALWAYS and no references to
   MenuItem.SHOW_AS_ACTION_IF_ROOM.

/home/chris/.documents/legislate/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/CustomSearchView.kt:8: Warning: Custom view CustomSearchView is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int) [ViewConstructor]
class CustomSearchView(context: Context, fragment: Fragment) : SearchView(context) {
      ~~~~~~~~~~~~~~~~
/home/chris/.documents/legislate/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/CustomToolbar.kt:7: Warning: Custom view CustomToolbar is missing constructor used by tools: (Context) or (Context,AttributeSet) or (Context,AttributeSet,int) [ViewConstructor]
open class CustomToolbar(context: Context, val config: ScreenStackHeaderConfig) : Toolbar(context)
           ~~~~~~~~~~~~~

   Explanation for issues of type "ViewConstructor":
   Some layout tools (such as the Android layout editor) need to find a
   constructor with one of the following signatures:
   * View(Context context)
   * View(Context context, AttributeSet attrs)
   * View(Context context, AttributeSet attrs, int defStyle)

   If your custom view needs to perform initialization which does not apply
   when used in a layout editor, you can surround the given code with a check
   to see if View#isInEditMode() is false, since that method will return false
   at runtime but true within a user interface editor.

/home/chris/.documents/legislate/node_modules/react-native-screens/android/build.gradle:108: Information: Add suffix -ktx to enable the Kotlin extensions for this library [KtxExtensionAvailable]
    implementation 'androidx.fragment:fragment:1.2.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KtxExtensionAvailable":
   Android KTX extensions augment some libraries with support for modern
   Kotlin language features like extension functions, extension properties,
   lambdas, named parameters, coroutines, and more.

   In Kotlin projects, use the KTX version of a library by replacing the
   dependency in your build.gradle file. For example, you can replace
   androidx.fragment:fragment with androidx.fragment:fragment-ktx.

   https://developer.android.com/kotlin/ktx

0 errors, 12 warnings
